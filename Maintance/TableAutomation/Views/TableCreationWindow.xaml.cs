using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Linq;
using System.Runtime.Intrinsics.Arm;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Shapes;

using Maintance.Converters;
using Maintance.DbModels;
using Maintance.Services;
using Maintance.TableAutomation.Models;
using Maintance.ValidationRules;

using WPFCoreEx.ValidationRules;

namespace Maintance.TableAutomation.Views
{
	/// <summary>
	/// Interaction logic for TableCreate.xaml
	/// </summary>
	public partial class TableCreationWindow : Window
	{
		private readonly ReadOnlyCollection<BindingExpressionBase> _entityBindings;
		private readonly ITableManager _tableManager;

		public TableCreationWindow(ITableManager tableManager, TableManagerSelector tableManagerSelector)
		{
			InitializeComponent();
			LabelTop.Content = tableManager.ParentName;
			var c = FieldsPanel.Children;
			var defForeground = Application.Current.Resources["DefaultAutoGeneratedContentForeground"] as SolidColorBrush;
			Collection<BindingExpressionBase> bindingExpressions = new();
			foreach (var vcp in tableManager.TableColumnInfos)
			{
				if (vcp.PropertyInfoAttribute.IsAutofoFill) continue;
				Control controlForProperty;
				FrameworkElement? parent = null;
				Type? t = Nullable.GetUnderlyingType(vcp.PropertyInfo.PropertyType);
				bool isNullable = !vcp.PropertyInfo.PropertyType.IsValueType || t != null;
				t ??= vcp.PropertyInfo.PropertyType;
				Binding binding = new(vcp.PropertyInfo.Name);
				BindingExpression currentBindingExpr;
				bool isDBModel = t.GetInterfaces().Contains(typeof(IDBModel));
				//binding.Mode = BindingMode.TwoWay;
				binding.Mode = isDBModel ? BindingMode.OneWay : BindingMode.TwoWay;
				binding.UpdateSourceTrigger = UpdateSourceTrigger.Default;
				if (!isNullable || !vcp.PropertyInfoAttribute.IsOptional)
				{
					if (t == typeof(string))
					{
						binding.ValidationRules.Add(new StringNotEmptyValidationRule()
						{
							MessageIfEmpty = "Обязательно к заполнению! (string)",
							ValidationStep = ValidationStep.RawProposedValue,
							ValidatesOnTargetUpdated = true
						});
					}
					else
					{
						binding.ValidationRules.Add(new NotNullOrEmptyValidationRule()
						{
							MessageIfFail = "Обязательно к заполнению!",
							ValidationStep = ValidationStep.RawProposedValue,
							ValidatesOnTargetUpdated = true
						});
					}
				}
				if (t == typeof(DateOnly))
				{
					var dp = new DatePicker();
					binding.Converter = new DateOnlyToDateTimeConverter();
					currentBindingExpr = (BindingExpression)BindingOperations.SetBinding(dp, DatePicker.SelectedDateProperty, binding);
					controlForProperty = dp;
				}
				else if (t == typeof(TimeOnly))
				{
					var tp = new MaterialDesignThemes.Wpf.TimePicker();
					binding.Converter = new TimeOnlyToDateTimeConverter();
					currentBindingExpr = (BindingExpression)BindingOperations.SetBinding(tp,
						  MaterialDesignThemes.Wpf.TimePicker.SelectedTimeProperty, binding);
					controlForProperty = tp;
				}
				else if (t == typeof(bool))
				{
					var cb = new CheckBox
					{
						Content = vcp.PropertyInfoAttribute.DisplayName
					};
					currentBindingExpr = (BindingExpression)BindingOperations.SetBinding(cb, CheckBox.IsCheckedProperty, binding);
					controlForProperty = cb;
				}
				else if (t.IsEnum)
				{
					var enumStrDict = AutomationHelper.GetEnumDescriptions(t);
					var cb = new ComboBox
					{
						ItemsSource = enumStrDict.Values
					};
					binding.Converter = new EnumToStrConverter(enumStrDict, t);
					currentBindingExpr = (BindingExpression)BindingOperations.SetBinding(cb, ComboBox.SelectedItemProperty, binding);
					controlForProperty = cb;
				}
				else if (isDBModel)
				{
					//binding.Converter = new FromSourceOnlyConverter();
					binding.TargetNullValue = null;
					DockPanel dp = new()
					{
						LastChildFill = true
					};
					Button btn = new();
					btn.Content = new MaterialDesignThemes.Wpf.PackIcon()
					{
						Kind = MaterialDesignThemes.Wpf.PackIconKind.ArrowBottomLeftBoldBox
					};
					var dbModelTableManager = tableManagerSelector.GetITableManager(t);
					//btn.Style = (Style)Application.Current.Resources["MaterialDesignIconButton"];
					TextBox tb = new() { IsReadOnly = false, IsReadOnlyCaretVisible = true };
					currentBindingExpr = (BindingExpression)BindingOperations.SetBinding(tb, TextBox.TextProperty, binding);
					btn.Click += (s, e) =>
					{
						if (dbModelTableManager.TrySelectEntity(out var res, this))
						{
							vcp.PropertyInfo.SetValue(currentBindingExpr.DataItem, res);
							currentBindingExpr.UpdateTarget();
						}
					};

					DockPanel.SetDock(btn, Dock.Right);
					DockPanel.SetDock(tb, Dock.Left);
					dp.Children.Add(btn);
					dp.Children.Add(tb);
					controlForProperty = tb;

					parent = dp;
				}
				else
				{
					var tb = new TextBox();
					tb.Style = (Style)Application.Current.Resources["MaterialDesignFloatingHintTextBox"];
					//binding.Converter = new EmptyStringToNullConverter();
					currentBindingExpr = (BindingExpression)BindingOperations.SetBinding(tb, TextBox.TextProperty, binding);
					controlForProperty = tb;
				}
				parent ??= controlForProperty;
				MaterialDesignThemes.Wpf.HintAssist.SetHint(controlForProperty, vcp.PropertyInfoAttribute.DisplayName);
				bindingExpressions.Add(currentBindingExpr);
				parent.Margin = new(0, 20, 0, 20);
				if (defForeground != null) controlForProperty.Foreground = defForeground;
				c.Add(parent);
			}
			_entityBindings = new(bindingExpressions);
			this._tableManager = tableManager;
		}

		private bool _isSaved = false;
		private bool _isEditing = false;

		private async void AddBtnClick(object sender, RoutedEventArgs e)
		{
			this.IsEnabled = false;
			bool hasError = false;
			foreach (var b in _entityBindings)
			{
				b.UpdateTarget();
				if (b.HasValidationError)
				{
					hasError |= true;
				}
				else
				{
					hasError |= !b.ValidateWithoutUpdate();
				}
			}
			if (!hasError)
			{
				bool saved = await _tableManager.TrySaveWorkingEntityToDB(!_isEditing);
				if (saved)
				{
					this._isSaved = true;
					this.Hide();
				}
			}
			this.IsEnabled = true;
		}

		private async void CancelBtnClick(object sender, RoutedEventArgs e)
		{
			if (_isEditing)
			{
				await _tableManager.TryCancelEditWorkingEntity();
				foreach (var b in _entityBindings)
				{
					b.UpdateTarget();
				}
			}
			this._isSaved = false;
			this.Hide();
		}

		public bool CreateInDialog<T>(T entity, Window owner)
			where T : class
		{
			_isEditing = false;
			this.Owner = owner;
			this.FieldsPanel.DataContext = entity;
			this._isSaved = false;
			this.ShowDialog();
			return _isSaved;
		}

		public bool EditInDialog<T>(T entity, Window owner)
			where T : class
		{
			_isEditing = true;
			this.Owner = owner;
			this.FieldsPanel.DataContext = entity;
			this._isSaved = false;
			this.ShowDialog();
			return _isSaved;
		}
	}
}
